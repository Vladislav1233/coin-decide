{"version":3,"sources":["components/Coin/index.js","helpers/launchFlipCoin.js","App.js","serviceWorker.js","index.js"],"names":["Sprite","options","Object","classCallCheck","this","ctx","image","countLoop","frameIndex","tickCount","ticksPerFrame","numberOfFrames","width","height","start","clearRect","drawImage","_this","window","requestAnimationFrame","loop","update","render","launchFlipCoin","numFrame","ticksFrame","canvas","document","getElementById","coinImage","Image","src","getContext","App","Shake","threshold","timeout","addEventListener","react_default","a","createElement","className","Component","Boolean","location","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPA8DeA,aA7Db,SAAAA,EAAYC,GAAUC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GACpBI,KAAKC,IAAMJ,EAAQI,IAEnBD,KAAKE,MAAQL,EAAQK,MACrBF,KAAKG,UAAY,EAEjBH,KAAKI,WAAa,EAClBJ,KAAKK,UAAY,EACjBL,KAAKM,cAAgBT,EAAQS,eAAiB,EAC9CN,KAAKO,eAAiBV,EAAQU,gBAAkB,EAEhDP,KAAKQ,MAAQX,EAAQW,MACrBR,KAAKS,OAASZ,EAAQY,OAEtBT,KAAKU,6DAILV,KAAKK,YAEDL,KAAKK,UAAYL,KAAKM,gBACxBN,KAAKK,UAAY,EACbL,KAAKI,WAAaJ,KAAKO,eAAiB,EAC1CP,KAAKI,cAELJ,KAAKI,WAAa,EAClBJ,KAAKG,YACLH,KAAKM,mDAMTN,KAAKC,IAAIU,UAAU,EAAG,EAAGX,KAAKQ,MAAQR,KAAKO,eAAgBP,KAAKS,QAChET,KAAKC,IAAIW,UACPZ,KAAKE,MACLF,KAAKI,WAAaJ,KAAKQ,MAAQR,KAAKO,eACpC,EACAP,KAAKQ,MAAQR,KAAKO,eAClBP,KAAKS,OACL,EACA,EACAT,KAAKQ,MAAQR,KAAKO,eAClBP,KAAKS,wCAID,IAAAI,EAAAb,KAUNc,OAAOC,sBATI,SAAPC,IACFH,EAAKI,SACLJ,EAAKK,SAEDL,EAAKV,WAAa,IACpBW,OAAOC,sBAAsBC,cCnCtBG,EAjBQ,SAACC,EAAUC,GAChC,IAAIC,EAASC,SAASC,eAAe,UACrCF,EAAOd,MAAQ,IACfc,EAAOb,OAAS,IAChB,IAAIgB,EAAY,IAAIC,MACpBD,EAAUE,IAAM,yJAEH,IAAI/B,EAAO,CACpBK,IAAKqB,EAAOM,WAAW,MACvB1B,MAAOuB,EACPjB,MAAO,IACPC,OAAQ,IACRF,eAAgBa,GAAY,EAC5Bd,cAAee,GAAc,KCwBpBQ,8LA7BU,IAAIC,IAAM,CAC7BC,UAAW,GACXC,QAAS,MAIEtB,QAGbI,OAAOmB,iBAAiB,QAGxB,WACEd,MAJmD,oCAYrD,OAFAA,IAGEe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eA3BHC,aCOEC,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DCZNC,IAASzB,OAAOgB,EAAAC,EAAAC,cAACQ,EAAD,MAASrB,SAASC,eAAe,SD2H3C,kBAAmBqB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.63d9d378.chunk.js","sourcesContent":["class Sprite {\r\n  constructor(options) {\r\n    this.ctx = options.ctx;\r\n\r\n    this.image = options.image;\r\n    this.countLoop = 0;\r\n\r\n    this.frameIndex = 0;\r\n    this.tickCount = 0;\r\n    this.ticksPerFrame = options.ticksPerFrame || 0;\r\n    this.numberOfFrames = options.numberOfFrames || 1;\r\n\r\n    this.width = options.width;\r\n    this.height = options.height;\r\n\r\n    this.start();\r\n  }\r\n\r\n  update() {\r\n    this.tickCount++;\r\n\r\n    if (this.tickCount > this.ticksPerFrame) {\r\n      this.tickCount = 0;\r\n      if (this.frameIndex < this.numberOfFrames - 1) {\r\n        this.frameIndex++;\r\n      } else {\r\n        this.frameIndex = 0;\r\n        this.countLoop++;\r\n        this.ticksPerFrame++;\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    this.ctx.clearRect(0, 0, this.width / this.numberOfFrames, this.height);\r\n    this.ctx.drawImage(\r\n      this.image,\r\n      this.frameIndex * this.width / this.numberOfFrames,\r\n      0,\r\n      this.width / this.numberOfFrames,\r\n      this.height,\r\n      0,\r\n      0,\r\n      this.width / this.numberOfFrames,\r\n      this.height\r\n    )\r\n  }\r\n\r\n  start() {\r\n    let loop = () => {\r\n      this.update();\r\n      this.render();\r\n\r\n      if (this.countLoop <= 20) {\r\n        window.requestAnimationFrame(loop);\r\n      }\r\n    }\r\n\r\n    window.requestAnimationFrame(loop);\r\n  }\r\n}\r\n\r\nexport default Sprite;","import Sprite from 'components/Coin/';\r\n\r\nconst launchFlipCoin = (numFrame, ticksFrame) => {\r\n  let canvas = document.getElementById('canvas');\r\n  canvas.width = 100;\r\n  canvas.height = 100;\r\n  let coinImage = new Image();\r\n  coinImage.src = 'http://www.williammalone.com/articles/create-html5-canvas-javascript-sprite-animation/downloads/sprite-animation-demo/images/coin-sprite-animation.png';\r\n  // eslint-disable-next-line\r\n  let sprite = new Sprite({\r\n      ctx: canvas.getContext('2d'),\r\n      image: coinImage,\r\n      width: 1000,\r\n      height: 100,\r\n      numberOfFrames: numFrame || 0,\r\n      ticksPerFrame: ticksFrame || 0,\r\n  });\r\n};\r\n\r\nexport default launchFlipCoin;","import React, { Component } from 'react';\r\nimport './App.scss';\r\nimport Shake from 'shake2.js';\r\nimport launchFlipCoin from 'helpers/launchFlipCoin';\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n\r\n    // Create an instance\r\n    const myShakeEvent = new Shake({\r\n      threshold: 15, // optional shake strength threshold\r\n      timeout: 1000 // optional, determines the frequency of event generation\r\n    });\r\n\r\n    // Start listening to device motion:\r\n    myShakeEvent.start();\r\n\r\n    // Register a `shake` event listener on `window` with your callback:\r\n    window.addEventListener('shake', shakeEventDidOccur, false);\r\n\r\n    // Dunction to call when shake event occurs\r\n    function shakeEventDidOccur () {\r\n      launchFlipCoin();\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    launchFlipCoin();\r\n\r\n    return (\r\n      <div className=\"App\">\r\n      </div>\r\n    )\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}